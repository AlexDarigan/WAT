<?xml version="1.0" ?>
<testsuites failures="3" name="TestXML" tests="59" time="26.407">
	<testsuite name="Assert That" failures="0"  tests="2" time="0">
		<testcase name=" auto pass" time="0"></testcase>
		<testcase name=" assert that" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Equality Assertion" failures="0"  tests="8" time="0">
		<testcase name="When callign asserts.is_not_equal(5, 6)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_greater_than(2, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_greater_than(2, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_greater_than(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_less_than(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_approx_(1, 0.999999)" time="0"></testcase>
		<testcase name="When calling asserts.is_less_than(2, 1)" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A File Assertion" failures="0"  tests="3" time="0">
		<testcase name="When calling asserts.file_exists when the file is this suite" time="0"></testcase>
		<testcase name="When calling asserts.file_does_not_exist when there is no file" time="0"></testcase>
		<testcase name="When calling asserts file does not exist when path is empty" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Folder Assertion" failures="0"  tests="3" time="0">
		<testcase name="When calling asserts.folder_does_not_exist when there is no folder" time="0"></testcase>
		<testcase name="When calling asserts folder does not exist when path is empty" time="0"></testcase>
		<testcase name="When calling asserts.folder_exists when the folder is this suite" time="0"></testcase>
	</testsuite>

	<testsuite name="Has" failures="0"  tests="5" time="0">
		<testcase name=" dict has key" time="0"></testcase>
		<testcase name=" dict does not have value" time="0"></testcase>
		<testcase name=" dict does not have key" time="0"></testcase>
		<testcase name=" array has value" time="0"></testcase>
		<testcase name=" array does not have value" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Is Instance of class/type Assertion" failures="0"  tests="26" time="0">
		<testcase name="When callign asserts.is_int(1)" time="0"></testcase>
		<testcase name="When calling asserts.is_RID(rid: RID)" time="0"></testcase>
		<testcase name="When calling asserts.is_Plane(plane: Plane())" time="0"></testcase>
		<testcase name="When calling asserts.is_color(color: Color)" time="0"></testcase>
		<testcase name="When calling asserts.is_basis(basis: Basis" time="0"></testcase>
		<testcase name="When calling asserts.is_NodePath(@'Parent/Child')" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolColorArray(colors: PoolColorArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_Array(array: Array)" time="0"></testcase>
		<testcase name="When calling asserts.is_Quat(quat: Quat)" time="0"></testcase>
		<testcase name="When calling asserts.is_string(strs: String)" time="0"></testcase>
		<testcase name="When calling asserts.is_float(1.0)" time="0"></testcase>
		<testcase name="When calling is asserts.object(node: Node)" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolByteArray(bytes: PoolByteArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolIntArray(ints: PoolIntArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_Rect2(rect2: Rect2)" time="0"></testcase>
		<testcase name="When calling asserts.is_Transform(transform: Transform)" time="0"></testcase>
		<testcase name="When calling asserts.is_Vector2(vec2)" time="0"></testcase>
		<testcase name="When calling asserts.is_bool(true)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolStringArray(strs: PoolStringArray)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolRealArray(reals: PoolRealArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_Transform(transform2D: Transform2D)" time="0"></testcase>
		<testcase name="When calling asserts.is_Dictionary({})" time="0"></testcase>
		<testcase name="When calling asserts.is_AABB(aabb: AABB)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)" time="0"></testcase>
		<testcase name="When calling asserts.is_Vector3(vec3: Vector3" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Is Not Instance of class/type Assertion" failures="0"  tests="26" time="0">
		<testcase name="when calling asserts.is_not_NodePath(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Object(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolIntArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_float(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Color(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_bool(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_AABB(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Dictionary(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_int(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Plane(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Basis(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolByteArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolColorArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Vector2(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Quat(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolStringArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolRealArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolVector2Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolVector3Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_RID(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_String(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Vector3(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Rect2(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Transform2D(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Transform(null)" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Null Assertion" failures="0"  tests="4" time="0">
		<testcase name="When calling asserts.is_not_valid_instance(freed node)" time="0"></testcase>
		<testcase name="When calling asserts.is_null(null)" time="0"></testcase>
		<testcase name="When calling is_instance_valid(node)" time="0"></testcase>
		<testcase name="When calling Node is not null" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Object Assertion" failures="0"  tests="15" time="0">
		<testcase name="When calling obj_has_user_signal after adding a signal" time="0"></testcase>
		<testcase name="When calling asserts.object_is_queued for deletion after calling queue_free" time="0"></testcase>
		<testcase name="When calling asserts.is_freed(freed_object" time="0"></testcase>
		<testcase name="When calling has_method('title')" time="0"></testcase>
		<testcase name="When calling asserts.object_does_not_have_meta()" time="0"></testcase>
		<testcase name="When calling asserts.object_is_not_for_queued_deletion after not calling queue free()" time="0"></testcase>
		<testcase name="When calling asserts object is connected with a valid connection" time="0"></testcase>
		<testcase name="When calling is not blocking signals while not blocking signals" time="0"></testcase>
		<testcase name="When calling asserts.object_has_meta() after adding metadata" time="0"></testcase>
		<testcase name="When calling does not have user signal with class signal" time="0"></testcase>
		<testcase name="When calling asserts object is not connected with an invalid connection" time="0"></testcase>
		<testcase name="When calling is blocking signals while blocking signals" time="0"></testcase>
		<testcase name="When calling asserts.is_not_freed(unfreed_object)" time="0"></testcase>
		<testcase name="When calling obj_does_not_have_user_signal with fake signal" time="0"></testcase>
		<testcase name="When calling asserts.object_has_meta with real key but null val" time="0"></testcase>
	</testsuite>

	<testsuite name="Given the Addition Operator" failures="0"  tests="2" time="0">
		<testcase name="When we add 7 to 6 we get 13" time="0"></testcase>
		<testcase name="When we subtract 7 from 6 we get 1" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Range Assertion" failures="0"  tests="2" time="0">
		<testcase name="When calling is (0) in range(0, 10)" time="0"></testcase>
		<testcase name="When calling is (10) not in range (in range(0, 10)" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a String Assertion" failures="0"  tests="6" time="0">
		<testcase name="When calling asserts.string_begins_with('lorem', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_does_not_begin_with('lorem', 'impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_contains('em im', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_does_not_contain('em im', 'impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_ends_with('impsum', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_does_not_end_with('lorem', 'impsum')" time="0"></testcase>
	</testsuite>

	<testsuite name="Supersimple" failures="0"  tests="1" time="0">
		<testcase name=" simple" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Test Script" failures="0"  tests="3" time="0">
		<testcase name="When we record properties" time="0"></testcase>
		<testcase name=" we can omit describe" time="0"></testcase>
		<testcase name=" when we omit context we can see expected and got under method" time="0"></testcase>
	</testsuite>

	<testsuite name="FileSystemTest" failures="0"  tests="2" time="0">
		<testcase name="Uncompiled C# script using WAT; extending Test included" time="0"></testcase>
		<testcase name="GetScriptEditorOnly" time="0"></testcase>
	</testsuite>

	<testsuite name="AwaitTest" failures="0"  tests="5" time="0">
		<testcase name="AwaitUntilTimeout" time="0"></testcase>
		<testcase name="AwaitUntilSignal" time="0"></testcase>
		<testcase name="AwaitUntilEvent" time="0"></testcase>
		<testcase name="AwaitUntilEventHandlerEventWithArgs" time="0"></testcase>
		<testcase name="AwaitUntilEventWithArgs" time="0"></testcase>
	</testsuite>

	<testsuite name="My Example Test" failures="0"  tests="2" time="0">
		<testcase name="This Is My Simple Test" time="0"></testcase>
		<testcase name="MyParameterizedTest" time="0"></testcase>
	</testsuite>

	<testsuite name="WatchSignalsTest" failures="0"  tests="5" time="0">
		<testcase name="SignalWasEmitted" time="0"></testcase>
		<testcase name="SignalWasNotEmitted" time="0"></testcase>
		<testcase name="SignalWasEmittedXTimes" time="0"></testcase>
		<testcase name="SignalWasEmittedWithArguments" time="0"></testcase>
		<testcase name="TestRunAllMode" time="0"></testcase>
	</testsuite>

	<testsuite name="My Example Test" failures="0"  tests="2" time="0">
		<testcase name="My Example Test Method" time="0"></testcase>
		<testcase name=" parameterized example" time="0"></testcase>
	</testsuite>

	<testsuite name="Watch Signals" failures="0"  tests="4" time="0">
		<testcase name=" signal was emitted" time="0"></testcase>
		<testcase name=" signal was emitted x times" time="0"></testcase>
		<testcase name=" signal was not emitted" time="0"></testcase>
		<testcase name=" signal was emitted with arguments" time="0"></testcase>
	</testsuite>

	<testsuite name="Create Scene Director" failures="0"  tests="2" time="0">
		<testcase name=" create a test scene director from string path" time="0"></testcase>
		<testcase name=" create a test scene director from packed scene" time="0"></testcase>
	</testsuite>

	<testsuite name="Create Scene Doubles" failures="0"  tests="2" time="0">
		<testcase name=" can stub methods of scene double children" time="0"></testcase>
		<testcase name=" create test double scene instance" time="0"></testcase>
	</testsuite>

	<testsuite name="Create Script Director" failures="0"  tests="7" time="0">
		<testcase name=" create a test script director from builtin class name" time="0"></testcase>
		<testcase name=" create a test script director from a nested inner class" time="0"></testcase>
		<testcase name=" create a test script director from user defined class name" time="0"></testcase>
		<testcase name=" create a test script director from an inner class" time="0"></testcase>
		<testcase name=" create a test script director from loaded class" time="0"></testcase>
		<testcase name=" create a test script director with constructor dependecies" time="0"></testcase>
		<testcase name=" create a test script director from string path" time="0"></testcase>
	</testsuite>

	<testsuite name="Create Script Doubles" failures="0"  tests="2" time="0">
		<testcase name=" doubled object is instance of base class" time="0"></testcase>
		<testcase name=" stubbed method returns stubbed value" time="0"></testcase>
	</testsuite>

	<testsuite name="Use Method Director" failures="0"  tests="11" time="0">
		<testcase name=" doubled methods return null by default" time="0"></testcase>
		<testcase name=" doubled methods was called" time="0"></testcase>
		<testcase name=" doubled methods was called with arguments" time="0"></testcase>
		<testcase name=" doubled methods call implementation instead of null" time="0"></testcase>
		<testcase name=" subcall via funcref" time="0"></testcase>
		<testcase name=" subcall via object" time="0"></testcase>
		<testcase name=" doubled methods was called with partial argument" time="0"></testcase>
		<testcase name=" stub methods with return value" time="0"></testcase>
		<testcase name=" doubled method was not called" time="0"></testcase>
		<testcase name=" stub methods with return value based on param values" time="0"></testcase>
		<testcase name=" stub methods with return value based on partial param values" time="0"></testcase>
	</testsuite>

	<testsuite name="Params" failures="0"  tests="1" time="0">
		<testcase name=" simple" time="0"></testcase>
	</testsuite>

	<testsuite name="Pre" failures="1"  tests="1" time="0">
		<testcase name=" x" time="0">
			<failure message="EXPECTED: |bool| False == true but GOT |bool| False != true"></failure></testcase>
	</testsuite>

	<testsuite name="Stack" failures="0"  tests="3" time="0">
		<testcase name=" simple" time="0"></testcase>
		<testcase name=" array with objs" time="0"></testcase>
		<testcase name=" arrays" time="0"></testcase>
	</testsuite>

	<testsuite name="Size" failures="1"  tests="2" time="0">
		<testcase name=" run all mode" time="0"></testcase>
		<testcase name=" one" time="0">
			<failure message="EXPECTED: Collection size is 5 but GOT Collection size is not 5 (Actual size is 0)"></failure></testcase>
	</testsuite>

	<testsuite name="Given a Signal Watcher" failures="0"  tests="4" time="0">
		<testcase name="When we watch and emit a signal" time="0"></testcase>
		<testcase name="When we watch and do not emit a signal" time="0"></testcase>
		<testcase name="When we watch and signal and emit it multiple times" time="0"></testcase>
		<testcase name="When we watch a signal from an object with no bound variables" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Signal Watcher" failures="0"  tests="4" time="0">
		<testcase name="When we watch and emit a signal" time="0"></testcase>
		<testcase name="When we watch and signal and emit it multiple times" time="0"></testcase>
		<testcase name="When we watch a signal from an object with no bound variables" time="0"></testcase>
		<testcase name="When we watch and do not emit a signal" time="0"></testcase>
	</testsuite>

	<testsuite name="Default Args" failures="0"  tests="1" time="0">
		<testcase name=" default arguments of interpolate property" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Test Double" failures="0"  tests="19" time="0">
		<testcase name="When we pass a funcref as a subcall that returns" time="0"></testcase>
		<testcase name="When we add an doubled inner class to it" time="0"></testcase>
		<testcase name="When we pass arguments to a method call that we are spying on" time="0"></testcase>
		<testcase name="When we pass a funcref as a subcall" time="0"></testcase>
		<testcase name="When we call a method that was stubbed with a partial (ie using any()) argument pattern" time="0"></testcase>
		<testcase name="When we call an add(x, y) method that we haven't directed" time="0"></testcase>
		<testcase name="When we pass an Object with a call_func function" time="0"></testcase>
		<testcase name="When we pass in dependecies on direct" time="0"></testcase>
		<testcase name="When we stub a method of a doubled inner class" time="0"></testcase>
		<testcase name="When we pass in dependecies on double" time="0"></testcase>
		<testcase name="When we call a method that was stubbed to return different values based on argument patterns" time="0"></testcase>
		<testcase name="When we double an inner class" time="0"></testcase>
		<testcase name="When we call a method that we have dummied" time="0"></testcase>
		<testcase name="When we call a method that we stubbed to call its super implementation by default" time="0"></testcase>
		<testcase name="When we call a method that we have stubbed to return true" time="0"></testcase>
		<testcase name="When we stubbed a keyworded method by passing in the correct keyword" time="0"></testcase>
		<testcase name="When we call a method that we have stubbed to return a node" time="0"></testcase>
		<testcase name="When we call a method that was stubbed with an argument pattern that includes a non-primitive object" time="0"></testcase>
		<testcase name="When we call a method that we are spying on" time="0"></testcase>
	</testsuite>

	<testsuite name="Given is_on_floor" failures="0"  tests="3" time="0">
		<testcase name="From a built-in KinematicBody2D2" time="0"></testcase>
		<testcase name="From a user-defined script" time="0"></testcase>
		<testcase name="From a child node of a scene without scripts" time="0"></testcase>
	</testsuite>

	<testsuite name="Property Member Test" failures="0"  tests="2" time="0">
		<testcase name="When we double a scene via path with exported values" time="0"></testcase>
		<testcase name="When we double a scene via PackedScene with exported values" time="0"></testcase>
	</testsuite>

	<testsuite name="Resourcex" failures="0"  tests="1" time="0">
		<testcase name=" deleted resource has no res path" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Scene Director" failures="0"  tests="5" time="0">
		<testcase name="When we call a method from the root node that we stubbed" time="0"></testcase>
		<testcase name="When we call a method from a child node that we stubbed" time="0"></testcase>
		<testcase name="When we add it to the tree it runs" time="0"></testcase>
		<testcase name="When we create two of it for the same scene" time="0"></testcase>
		<testcase name="When we call a method from a grandchild node that we stubbed" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Script Director" failures="0"  tests="4" time="0">
		<testcase name="When we create two of it for the same script" time="0"></testcase>
		<testcase name=" from name" time="0"></testcase>
		<testcase name="When we call the double the second time" time="0"></testcase>
		<testcase name="When we double an inner class" time="0"></testcase>
	</testsuite>

	<testsuite name="AttributeTest" failures="0"  tests="1" time="0">
		<testcase name="SimpleTest" time="0"></testcase>
	</testsuite>

	<testsuite name="AttributeYieldTest" failures="0"  tests="1" time="0">
		<testcase name="SimpleTest" time="0"></testcase>
	</testsuite>

	<testsuite name="BasicCSharpTest" failures="0"  tests="2" time="0">
		<testcase name="CSharpTestsWorking" time="0"></testcase>
		<testcase name="CSXharpTestsWorking" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Boolean Assertion" failures="0"  tests="2" time="0">
		<testcase name="A Tautology" time="0"></testcase>
		<testcase name="FalseIsFalse" time="0"></testcase>
	</testsuite>

	<testsuite name="ExceptionTests" failures="0"  tests="5" time="0">
		<testcase name="AnExceptionWasThrown" time="0"></testcase>
		<testcase name="AnExceptionWasNotThrown" time="0"></testcase>
		<testcase name="AnExceptionOfNullReferenceWasThrown" time="0"></testcase>
		<testcase name="AnExceptionOfNullReferenceWasNotThrown" time="0"></testcase>
		<testcase name="AnExceptionOfTypeWasNotThrown" time="0"></testcase>
	</testsuite>

	<testsuite name="Is Instance ( class / type ) Assertions" failures="0"  tests="19" time="0">
		<testcase name="IsAABB" time="0"></testcase>
		<testcase name="IsArray" time="0"></testcase>
		<testcase name="IsBasis" time="0"></testcase>
		<testcase name="IsBool" time="0"></testcase>
		<testcase name="IsColor" time="0"></testcase>
		<testcase name="IsDictionary" time="0"></testcase>
		<testcase name="IsFloat" time="0"></testcase>
		<testcase name="IsInt" time="0"></testcase>
		<testcase name="IsNodePath" time="0"></testcase>
		<testcase name="IsObject" time="0"></testcase>
		<testcase name="IsPlane" time="0"></testcase>
		<testcase name="IsQuat" time="0"></testcase>
		<testcase name="IsRect2" time="0"></testcase>
		<testcase name="IsRid" time="0"></testcase>
		<testcase name="IsString" time="0"></testcase>
		<testcase name="IsTransform" time="0"></testcase>
		<testcase name="IsTransform2D" time="0"></testcase>
		<testcase name="IsVector2" time="0"></testcase>
		<testcase name="IsVector3" time="0"></testcase>
	</testsuite>

	<testsuite name="IsNotInstanceTest" failures="0"  tests="19" time="0">
		<testcase name="IsNotAABB" time="0"></testcase>
		<testcase name="IsNotArray" time="0"></testcase>
		<testcase name="IsNotBasis" time="0"></testcase>
		<testcase name="IsNotBool" time="0"></testcase>
		<testcase name="IsNotColor" time="0"></testcase>
		<testcase name="IsNotDictionary" time="0"></testcase>
		<testcase name="IsNotFloat" time="0"></testcase>
		<testcase name="IsNotInt" time="0"></testcase>
		<testcase name="IsNotNodePath" time="0"></testcase>
		<testcase name="IsNotObject" time="0"></testcase>
		<testcase name="IsNotPlane" time="0"></testcase>
		<testcase name="IsNotQuat" time="0"></testcase>
		<testcase name="IsNotRect2" time="0"></testcase>
		<testcase name="IsNotRID" time="0"></testcase>
		<testcase name="IsNotString" time="0"></testcase>
		<testcase name="IsNotTransform" time="0"></testcase>
		<testcase name="IsNotTransform2D" time="0"></testcase>
		<testcase name="IsNotVector2" time="0"></testcase>
		<testcase name="IsNotVector3" time="0"></testcase>
	</testsuite>

	<testsuite name="MyTest" failures="0"  tests="1" time="0">
		<testcase name="AutoPass" time="0"></testcase>
	</testsuite>

	<testsuite name="NullChecksTest" failures="0"  tests="2" time="0">
		<testcase name="NullChecks" time="0"></testcase>
		<testcase name="NullChecks2" time="0"></testcase>
	</testsuite>

	<testsuite name="Object Assertions" failures="0"  tests="16" time="0">
		<testcase name="When calling IsInstanceValid(node)" time="0"></testcase>
		<testcase name="When calling IsInstanceValid(freed node)" time="0"></testcase>
		<testcase name="WhenCallingHasMetaAfterAddingMetadata" time="0"></testcase>
		<testcase name="WhenCallingDoesNotHaveMeta" time="0"></testcase>
		<testcase name="WhenCallingDoesNotHaveMetalRealKeyButNullValue" time="0"></testcase>
		<testcase name="WhenCallingHasMethodTitle" time="0"></testcase>
		<testcase name="WhenCallingDoesNotHaveMethodFalseMethod" time="0"></testcase>
		<testcase name="WhenCallingHasUserSignalAfterAddingASignal" time="0"></testcase>
		<testcase name="WhenCallingDoesNotHaveUserSignal" time="0"></testcase>
		<testcase name="WhenCallingDoesNotHaveUserSignalWithClassSignalConstant" time="0"></testcase>
		<testcase name="WhenCallingObjectIsQueuedForDeletionAfterCallingQueueFree" time="0"></testcase>
		<testcase name="WhenCallingObjectIsNotQueuedForDeletionAfterNotCallingQueueFree" time="0"></testcase>
		<testcase name="WhenCallingObjIsConnectedWithARealConnection" time="0"></testcase>
		<testcase name="WhenCallingObjIsNotConnectedWithAnInvalidConnection" time="0"></testcase>
		<testcase name="TestIsBlockingSignals" time="0"></testcase>
		<testcase name="IsNotBlockingSignals" time="0"></testcase>
	</testsuite>

	<testsuite name="Range Assertions" failures="0"  tests="2" time="0">
		<testcase name="WhenCallingIsInRange" time="0"></testcase>
		<testcase name="WhenCallingIsNotInRange" time="0"></testcase>
	</testsuite>

	<testsuite name="RepeatTests" failures="0"  tests="3" time="0">
		<testcase name="SimpleTest" time="0"></testcase>
		<testcase name="AdditionTest" time="0"></testcase>
		<testcase name="StringAttributeTest" time="0"></testcase>
	</testsuite>

	<testsuite name="SimpleTest" failures="0"  tests="1" time="0">
		<testcase name="IsTrue" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A String Assertion" failures="0"  tests="6" time="0">
		<testcase name="WhenCallingStringBeginWith" time="0"></testcase>
		<testcase name="WhenCallingStringDoesNotBeginWith" time="0"></testcase>
		<testcase name="WhenCallingStringContains" time="0"></testcase>
		<testcase name="WhenCallingStringDoesNotContain" time="0"></testcase>
		<testcase name="WhenCallingStringEndsWith" time="0"></testcase>
		<testcase name="WhenCallingStringDoesNotEndWith" time="0"></testcase>
	</testsuite>

	<testsuite name="UntilEvent" failures="0"  tests="6" time="0">
		<testcase name="EventReached" time="0"></testcase>
		<testcase name="EventTimedOut" time="0"></testcase>
		<testcase name="EventWithArgsReached" time="0"></testcase>
		<testcase name="EventWithArgsTimedOut" time="0"></testcase>
		<testcase name="EventWithCustomArgsReached" time="0"></testcase>
		<testcase name="EventWithCustomArgsTimedOut" time="0"></testcase>
	</testsuite>

	<testsuite name="UntilEventHandlerEvent" failures="0"  tests="6" time="0">
		<testcase name="EventReached" time="0"></testcase>
		<testcase name="EventTimedOut" time="0"></testcase>
		<testcase name="EventWithArgsReached" time="0"></testcase>
		<testcase name="EventWithArgsTimedOut" time="0"></testcase>
		<testcase name="EventWithCustomArgsReached" time="0"></testcase>
		<testcase name="EventWithCustomArgsTimedOut" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Signal Watcher" failures="0"  tests="4" time="0">
		<testcase name="WhenWeWatchASignalFromAnObjectWithNoBoundVariables" time="0"></testcase>
		<testcase name="When we watch and emit a signal xxx" time="0"></testcase>
		<testcase name="When we watch and do not emit a signal xxxx" time="0"></testcase>
		<testcase name="WhenWeWatchASignalAndEmitItMultipleTimes" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Yield" failures="0"  tests="10" time="0">
		<testcase name="WhenWeYieldInStart" time="0"></testcase>
		<testcase name="WhenWeYieldInPre" time="0"></testcase>
		<testcase name="WhenWeYieldInExecute" time="0"></testcase>
		<testcase name="YielderIsNotActiveDuringAssertions" time="0"></testcase>
		<testcase name="WhenASignalBeingYieldedOnIsEmittedTheYielderIsStopped" time="0"></testcase>
		<testcase name="WhenTheYielderIsFinishedSignalsAreDisconnected" time="0"></testcase>
		<testcase name="WhenWeCallUntilTimeout" time="0"></testcase>
		<testcase name="WhenWeCallUntilSignal" time="0"></testcase>
		<testcase name="WhenTheYielderTimesOut" time="0"></testcase>
		<testcase name="WhenTheYielderHearsOurSignal" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Boolean Assertion" failures="2"  tests="2" time="0">
		<testcase name="When calling asserts.is_false(false)" time="0">
			<failure message="EXPECTED: |bool| True == false but GOT |bool| True != false"></failure></testcase>
		<testcase name="When calling asserts.is_true(true)" time="0">
			<failure message="EXPECTED: |bool| False == true but GOT |bool| False != true"></failure></testcase>
	</testsuite>

	<testsuite name="Yield" failures="0"  tests="2" time="0">
		<testcase name=" yield until timeout" time="0"></testcase>
		<testcase name=" yield until signal" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Yield" failures="0"  tests="11" time="0">
		<testcase name="When we call until signal" time="0"></testcase>
		<testcase name="When a signal being yielded on is emitted" time="0"></testcase>
		<testcase name="When we call until_timeout (with 1.0)" time="0"></testcase>
		<testcase name="When yield(self.yield_value()) returns" time="0"></testcase>
		<testcase name="When the yielder times out on until_timeout(0.1)" time="0"></testcase>
		<testcase name="When the yielder heres our signal" time="0"></testcase>
		<testcase name="When we yield in pre thrice" time="0"></testcase>
		<testcase name="When we yield twice in execute" time="0"></testcase>
		<testcase name="When asserting against a test" time="0"></testcase>
		<testcase name="When it is finished" time="0"></testcase>
		<testcase name="When we yield in start twice" time="0"></testcase>
	</testsuite>

</testsuites>