<?xml version="1.0" ?>
<testsuites failures="0" name="TestXML" tests="22" time="5.1">
	<testsuite name="Size" failures="0"  tests="2" time="0">
		<testcase name=" run all mode" time="0"></testcase>
		<testcase name=" one" time="0"></testcase>
	</testsuite>

	<testsuite name="Stack" failures="0"  tests="3" time="0">
		<testcase name=" arrays" time="0"></testcase>
		<testcase name=" simple" time="0"></testcase>
		<testcase name=" array with objs" time="0"></testcase>
	</testsuite>

	<testsuite name="Params" failures="0"  tests="1" time="0">
		<testcase name=" simple" time="0"></testcase>
	</testsuite>

	<testsuite name="Boolean" failures="0"  tests="1" time="0">
		<testcase name=" is true" time="0"></testcase>
	</testsuite>

	<testsuite name="Watch Signals" failures="0"  tests="4" time="0">
		<testcase name=" signal was emitted" time="0"></testcase>
		<testcase name=" signal was emitted x times" time="0"></testcase>
		<testcase name=" signal was not emitted" time="0"></testcase>
		<testcase name=" signal was emitted with arguments" time="0"></testcase>
	</testsuite>

	<testsuite name="My Example Test" failures="0"  tests="2" time="0">
		<testcase name="My Example Test Method" time="0"></testcase>
		<testcase name=" parameterized example" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Test Script" failures="0"  tests="3" time="0">
		<testcase name=" we can omit describe" time="0"></testcase>
		<testcase name=" when we omit context we can see expected and got under method" time="0"></testcase>
		<testcase name="When we record properties" time="0"></testcase>
	</testsuite>

	<testsuite name="Supersimple" failures="0"  tests="1" time="0">
		<testcase name=" simple" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a String Assertion" failures="0"  tests="6" time="0">
		<testcase name="When calling asserts.string_does_not_begin_with('lorem', 'impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_contains('em im', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_does_not_contain('em im', 'impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_begins_with('lorem', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_ends_with('impsum', 'lorem impsum')" time="0"></testcase>
		<testcase name="When calling asserts.string_does_not_end_with('lorem', 'impsum')" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Range Assertion" failures="0"  tests="2" time="0">
		<testcase name="When calling is (0) in range(0, 10)" time="0"></testcase>
		<testcase name="When calling is (10) not in range (in range(0, 10)" time="0"></testcase>
	</testsuite>

	<testsuite name="Given the Addition Operator" failures="0"  tests="2" time="0">
		<testcase name="When we add 7 to 6 we get 13" time="0"></testcase>
		<testcase name="When we subtract 7 from 6 we get 1" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Object Assertion" failures="0"  tests="15" time="0">
		<testcase name="When calling asserts.object_is_queued for deletion after calling queue_free" time="0"></testcase>
		<testcase name="When calling has_method('title')" time="0"></testcase>
		<testcase name="When calling asserts.object_does_not_have_meta()" time="0"></testcase>
		<testcase name="When calling is not blocking signals while not blocking signals" time="0"></testcase>
		<testcase name="When calling asserts.object_has_meta() after adding metadata" time="0"></testcase>
		<testcase name="When calling obj_has_user_signal after adding a signal" time="0"></testcase>
		<testcase name="When calling does not have user signal with class signal" time="0"></testcase>
		<testcase name="When calling asserts object is not connected with an invalid connection" time="0"></testcase>
		<testcase name="When calling is blocking signals while blocking signals" time="0"></testcase>
		<testcase name="When calling obj_does_not_have_user_signal with fake signal" time="0"></testcase>
		<testcase name="When calling asserts.object_has_meta with real key but null val" time="0"></testcase>
		<testcase name="When calling asserts object is connected with a valid connection" time="0"></testcase>
		<testcase name="When calling asserts.is_not_freed(unfreed_object)" time="0"></testcase>
		<testcase name="When calling asserts.is_freed(freed_object" time="0"></testcase>
		<testcase name="When calling asserts.object_is_not_for_queued_deletion after not calling queue free()" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Null Assertion" failures="0"  tests="4" time="0">
		<testcase name="When calling asserts.is_not_valid_instance(freed node)" time="0"></testcase>
		<testcase name="When calling is_instance_valid(node)" time="0"></testcase>
		<testcase name="When calling asserts.is_null(null)" time="0"></testcase>
		<testcase name="When calling Node is not null" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Is Not Instance of class/type Assertion" failures="0"  tests="26" time="0">
		<testcase name="when calling asserts.is_not_PoolStringArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolByteArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolVector2Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Basis(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Color(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_float(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_bool(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_AABB(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Dictionary(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Object(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_int(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Plane(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolColorArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolIntArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_NodePath(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolRealArray(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_PoolVector3Array(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Rect2(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Quat(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_RID(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_String(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Transform2D(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Vector2(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Vector3(null)" time="0"></testcase>
		<testcase name="when calling asserts.is_not_Transform(null)" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Is Instance of class/type Assertion" failures="0"  tests="26" time="0">
		<testcase name="When calling asserts.is_basis(basis: Basis" time="0"></testcase>
		<testcase name="When calling asserts.is_Quat(quat: Quat)" time="0"></testcase>
		<testcase name="When calling asserts.is_string(strs: String)" time="0"></testcase>
		<testcase name="When calling asserts.is_Transform(transform2D: Transform2D)" time="0"></testcase>
		<testcase name="When calling asserts.is_Vector2(vec2)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolRealArray(reals: PoolRealArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_AABB(aabb: AABB)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolStringArray(strs: PoolStringArray)" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)" time="0"></testcase>
		<testcase name="When calling asserts.is_color(color: Color)" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolColorArray(colors: PoolColorArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolIntArray(ints: PoolIntArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_bool(true)" time="0"></testcase>
		<testcase name="When calling asserts.is_RID(rid: RID)" time="0"></testcase>
		<testcase name="When calling asserts.is_Transform(transform: Transform)" time="0"></testcase>
		<testcase name="When calling is asserts.object(node: Node)" time="0"></testcase>
		<testcase name="When calling asserts.is_Array(array: Array)" time="0"></testcase>
		<testcase name="When calling asserts.is_PoolByteArray(bytes: PoolByteArray)" time="0"></testcase>
		<testcase name="When calling asserts.is_Dictionary({})" time="0"></testcase>
		<testcase name="When calling asserts.is_NodePath(@'Parent/Child')" time="0"></testcase>
		<testcase name="When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)" time="0"></testcase>
		<testcase name="When calling asserts.is_float(1.0)" time="0"></testcase>
		<testcase name="When callign asserts.is_int(1)" time="0"></testcase>
		<testcase name="When calling asserts.is_Rect2(rect2: Rect2)" time="0"></testcase>
		<testcase name="When calling asserts.is_Vector3(vec3: Vector3" time="0"></testcase>
		<testcase name="When calling asserts.is_Plane(plane: Plane())" time="0"></testcase>
	</testsuite>

	<testsuite name="Has" failures="0"  tests="5" time="0">
		<testcase name=" array has value" time="0"></testcase>
		<testcase name=" dict does not have value" time="0"></testcase>
		<testcase name=" array does not have value" time="0"></testcase>
		<testcase name=" dict has key" time="0"></testcase>
		<testcase name=" dict does not have key" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A Folder Assertion" failures="0"  tests="3" time="0">
		<testcase name="When calling asserts.folder_exists when the folder is this suite" time="0"></testcase>
		<testcase name="When calling asserts.folder_does_not_exist when there is no folder" time="0"></testcase>
		<testcase name="When calling asserts folder does not exist when path is empty" time="0"></testcase>
	</testsuite>

	<testsuite name="Given A File Assertion" failures="0"  tests="3" time="0">
		<testcase name="When calling asserts.file_exists when the file is this suite" time="0"></testcase>
		<testcase name="When calling asserts.file_does_not_exist when there is no file" time="0"></testcase>
		<testcase name="When calling asserts file does not exist when path is empty" time="0"></testcase>
	</testsuite>

	<testsuite name="Given an Equality Assertion" failures="0"  tests="8" time="0">
		<testcase name="When calling asserts.is_equal(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_greater_than(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_greater_than(2, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_approx_(1, 0.999999)" time="0"></testcase>
		<testcase name="When calling asserts.is_less_than(2, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_less_than(1, 1)" time="0"></testcase>
		<testcase name="When calling asserts.is_equal_or_greater_than(2, 1)" time="0"></testcase>
		<testcase name="When callign asserts.is_not_equal(5, 6)" time="0"></testcase>
	</testsuite>

	<testsuite name="Assert That" failures="0"  tests="2" time="0">
		<testcase name=" auto pass" time="0"></testcase>
		<testcase name=" assert that" time="0"></testcase>
	</testsuite>

	<testsuite name="Given a Boolean Assertion" failures="0"  tests="2" time="0">
		<testcase name="When calling asserts.is_false(false)" time="0"></testcase>
		<testcase name="When calling asserts.is_true(true)" time="0"></testcase>
	</testsuite>

	<testsuite name="Yield" failures="0"  tests="2" time="0">
		<testcase name=" yield until timeout" time="0"></testcase>
		<testcase name=" yield until signal" time="0"></testcase>
	</testsuite>

</testsuites>