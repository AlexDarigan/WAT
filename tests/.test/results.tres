[gd_resource type="Resource" load_steps=49 format=2]

[ext_resource path="res://addons/WAT/resources/results.gd" type="Script" id=1]
[ext_resource path="res://tests/unit/test.test.gd" type="Script" id=2]
[ext_resource path="res://tests/unit/watcher.test.gd" type="Script" id=3]
[ext_resource path="res://tests/unit/yield.test.gd" type="Script" id=4]
[ext_resource path="res://tests/unit/yield2.test.gd" type="Script" id=5]
[ext_resource path="res://tests/unit/yield3.test.gd" type="Script" id=6]
[ext_resource path="res://tests/unit/string.test.gd" type="Script" id=7]
[ext_resource path="res://tests/unit/range.test.gd" type="Script" id=8]
[ext_resource path="res://tests/unit/on_floor.test.gd" type="Script" id=9]
[ext_resource path="res://tests/unit/parameters.test.gd" type="Script" id=10]
[ext_resource path="res://tests/unit/null.test.gd" type="Script" id=11]
[ext_resource path="res://tests/unit/file.test.gd" type="Script" id=12]
[ext_resource path="res://tests/integration/default_args.test.gd" type="Script" id=13]
[ext_resource path="res://tests/unit/equality.test.gd" type="Script" id=14]
[ext_resource path="res://tests/integration/scene_director.test.gd" type="Script" id=15]
[ext_resource path="res://tests/integration/script_director.test.gd" type="Script" id=16]
[ext_resource path="res://tests/unit/boolean.test.gd" type="Script" id=17]
[ext_resource path="res://tests/unit/is_instance.test.gd" type="Script" id=18]
[ext_resource path="res://tests/unit/is_not_instance.test.gd" type="Script" id=19]
[ext_resource path="res://tests/integration/test_double.test.gd" type="Script" id=20]
[ext_resource path="res://tests/unit/object.test.gd" type="Script" id=21]
[ext_resource path="res://tests/unit/someyield2.test.gd" type="Script" id=22]
[ext_resource path="res://tests/unit/ayield2.test.gd" type="Script" id=23]
[ext_resource path="res://tests/unit/Gyield2.test.gd" type="Script" id=24]

[sub_resource type="GDScript" id=1]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=2]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=3]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=4]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=5]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=6]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=7]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=8]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=9]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=10]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=11]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=12]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=13]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=14]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=15]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=16]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=17]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=18]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=19]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=20]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=21]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=22]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=23]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=24]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[resource]
script = ExtResource( 1 )
results = {
0: [  ],
1609801520: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:3148] is equal to |Object| [Node:3148]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3148] is equal to |Object| [Node:3148]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3234] is instance of class: [GDScript:3147]",
"context": "Then we get that inner class back",
"expected": "[Reference:3234] is instance of class: [GDScript:3147]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3207], A:[Reference:3208], A/B:[Reference:3210], C:[Reference:3209], C/D:[Reference:3211]} is not equal to |Dictionary| {.:[Reference:3223], A:[Reference:3224], A/B:[Reference:3226], C:[Reference:3225], C/D:[Reference:3227]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3207], A:[Reference:3208], A/B:[Reference:3210], C:[Reference:3209], C/D:[Reference:3211]} != |Dictionary| {.:[Reference:3223], A:[Reference:3224], A/B:[Reference:3226], C:[Reference:3225], C/D:[Reference:3227]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3429] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3429] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3329] is equal to |Object| [Node:3329]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3329] is equal to |Object| [Node:3329]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3459] is not freed",
"context": "Then it passes",
"expected": "[Node:3459] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3438] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3438] has meta: dummy",
"success": true
}, {
"actual": "[Node:3438] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3438] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3438] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3438] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] has method: title",
"context": "Then it passes",
"expected": "[Node:3438] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3438] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3438] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3438] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3510] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3510] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3515] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3515] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438].builtin_dummy is not connected to [Node:3438].title",
"context": "Then it passes",
"expected": "[Node:3438].builtin_dummy is not connected to [Node:3438].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3524] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3524] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3438].builtin_dummy is connected to [Node:3438].title",
"context": "Then it passes",
"expected": "[Node:3438].builtin_dummy is connected to [Node:3438].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3534] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3534] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3531] != null",
"context": "node is not null",
"expected": "|Object| [Node:3531] != null",
"success": true
}, {
"actual": "[Node:3531] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3531] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 1 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3605] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3605] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3605] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3605] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3605]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3605]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3605]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3605]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801542: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:2996] is equal to |Object| [Node:2996]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2996] is equal to |Object| [Node:2996]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3043] is instance of class: [GDScript:2995]",
"context": "Then we get that inner class back",
"expected": "[Reference:3043] is instance of class: [GDScript:2995]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3060], A:[Reference:3061], A/B:[Reference:3063], C:[Reference:3062], C/D:[Reference:3064]} is not equal to |Dictionary| {.:[Reference:3076], A:[Reference:3077], A/B:[Reference:3079], C:[Reference:3078], C/D:[Reference:3080]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3060], A:[Reference:3061], A/B:[Reference:3063], C:[Reference:3062], C/D:[Reference:3064]} != |Dictionary| {.:[Reference:3076], A:[Reference:3077], A/B:[Reference:3079], C:[Reference:3078], C/D:[Reference:3080]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:3254] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3254] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3293] is equal to |Object| [Node:3293]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3293] is equal to |Object| [Node:3293]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3301] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3301] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3283] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3283] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3283] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3339] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3339] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3283] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] has method: title",
"context": "Then it passes",
"expected": "[Node:3283] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283].builtin_dummy is connected to [Node:3283].title",
"context": "Then it passes",
"expected": "[Node:3283].builtin_dummy is connected to [Node:3283].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3356] is not freed",
"context": "Then it passes",
"expected": "[Node:3356] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3361] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3361] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283].builtin_dummy is not connected to [Node:3283].title",
"context": "Then it passes",
"expected": "[Node:3283].builtin_dummy is not connected to [Node:3283].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3283] has meta: dummy",
"success": true
}, {
"actual": "[Node:3283] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3283] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3283] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3283] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3384] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3216] != null",
"context": "node is not null",
"expected": "|Object| [Node:3216] != null",
"success": true
}, {
"actual": "[Node:3216] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3216] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3456]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3456]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3456] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3456] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3456]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3456]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3456] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3456] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801548: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:4877] is equal to |Object| [Node:4877]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:4877] is equal to |Object| [Node:4877]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:4924] is instance of class: [GDScript:2995]",
"context": "Then we get that inner class back",
"expected": "[Reference:4924] is instance of class: [GDScript:2995]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:4941], A:[Reference:4942], A/B:[Reference:4944], C:[Reference:4943], C/D:[Reference:4945]} is not equal to |Dictionary| {.:[Reference:4957], A:[Reference:4958], A/B:[Reference:4960], C:[Reference:4959], C/D:[Reference:4961]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:4941], A:[Reference:4942], A/B:[Reference:4944], C:[Reference:4943], C/D:[Reference:4945]} != |Dictionary| {.:[Reference:4957], A:[Reference:4958], A/B:[Reference:4960], C:[Reference:4959], C/D:[Reference:4961]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:5126] != null",
"context": "Then it passes",
"expected": "|Object| [Node:5126] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5174] is equal to |Object| [Node:5174]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:5174] is equal to |Object| [Node:5174]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:5168] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:5168] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:5158] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:5158] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:5158] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5214] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:5214] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:5158] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] has method: title",
"context": "Then it passes",
"expected": "[Node:5158] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158].builtin_dummy is connected to [Node:5158].title",
"context": "Then it passes",
"expected": "[Node:5158].builtin_dummy is connected to [Node:5158].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5230] is not freed",
"context": "Then it passes",
"expected": "[Node:5230] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5235] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:5235] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158].builtin_dummy is not connected to [Node:5158].title",
"context": "Then it passes",
"expected": "[Node:5158].builtin_dummy is not connected to [Node:5158].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5158] has meta: dummy",
"success": true
}, {
"actual": "[Node:5158] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5158] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5158] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:5158] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5258] is blocking signals",
"context": "Then it passes",
"expected": "[Node:5258] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5098] != null",
"context": "node is not null",
"expected": "|Object| [Node:5098] != null",
"success": true
}, {
"actual": "[Node:5098] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:5098] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:5330]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:5330]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:5330] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:5330] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:5330]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:5330]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:5330] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:5330] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801556: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:6986] is equal to |Object| [Node:6986]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:6986] is equal to |Object| [Node:6986]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:7033] is instance of class: [GDScript:2995]",
"context": "Then we get that inner class back",
"expected": "[Reference:7033] is instance of class: [GDScript:2995]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:7050], A:[Reference:7051], A/B:[Reference:7053], C:[Reference:7052], C/D:[Reference:7054]} is not equal to |Dictionary| {.:[Reference:7066], A:[Reference:7067], A/B:[Reference:7069], C:[Reference:7068], C/D:[Reference:7070]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:7050], A:[Reference:7051], A/B:[Reference:7053], C:[Reference:7052], C/D:[Reference:7054]} != |Dictionary| {.:[Reference:7066], A:[Reference:7067], A/B:[Reference:7069], C:[Reference:7068], C/D:[Reference:7070]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:7235] != null",
"context": "Then it passes",
"expected": "|Object| [Node:7235] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7283] is equal to |Object| [Node:7283]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:7283] is equal to |Object| [Node:7283]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:7279] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:7279] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:7269] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:7269] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:7269] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7324] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:7324] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:7269] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] has method: title",
"context": "Then it passes",
"expected": "[Node:7269] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269].builtin_dummy is connected to [Node:7269].title",
"context": "Then it passes",
"expected": "[Node:7269].builtin_dummy is connected to [Node:7269].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7341] is not freed",
"context": "Then it passes",
"expected": "[Node:7341] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7346] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:7346] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269].builtin_dummy is not connected to [Node:7269].title",
"context": "Then it passes",
"expected": "[Node:7269].builtin_dummy is not connected to [Node:7269].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7269] has meta: dummy",
"success": true
}, {
"actual": "[Node:7269] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7269] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7269] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:7269] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7369] is blocking signals",
"context": "Then it passes",
"expected": "[Node:7369] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7207] != null",
"context": "node is not null",
"expected": "|Object| [Node:7207] != null",
"success": true
}, {
"actual": "[Node:7207] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:7207] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:7443]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:7443]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:7443] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:7443] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:7443]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:7443]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:7443] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:7443] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801578: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3031] is equal to |Object| [Node:3031]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3031] is equal to |Object| [Node:3031]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3076] is instance of class: [GDScript:2991]",
"context": "Then we get that inner class back",
"expected": "[Reference:3076] is instance of class: [GDScript:2991]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3136], A:[Reference:3137], A/B:[Reference:3139], C:[Reference:3138], C/D:[Reference:3140]} is not equal to |Dictionary| {.:[Reference:3152], A:[Reference:3154], A/B:[Reference:3156], C:[Reference:3155], C/D:[Reference:3157]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3136], A:[Reference:3137], A/B:[Reference:3139], C:[Reference:3138], C/D:[Reference:3140]} != |Dictionary| {.:[Reference:3152], A:[Reference:3154], A/B:[Reference:3156], C:[Reference:3155], C/D:[Reference:3157]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3272] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3272] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3160] is equal to |Object| [Node:3160]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3160] is equal to |Object| [Node:3160]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3276] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3276] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3306] is not freed",
"context": "Then it passes",
"expected": "[Node:3306] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3276] has meta: dummy",
"success": true
}, {
"actual": "[Node:3276] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3276] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3332] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3332] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276].builtin_dummy is connected to [Node:3276].title",
"context": "Then it passes",
"expected": "[Node:3276].builtin_dummy is connected to [Node:3276].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] has method: title",
"context": "Then it passes",
"expected": "[Node:3276] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3346] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3346] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3276] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3276] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276].builtin_dummy is not connected to [Node:3276].title",
"context": "Then it passes",
"expected": "[Node:3276].builtin_dummy is not connected to [Node:3276].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3276] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3364] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3364] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3369] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3369] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3276] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3276] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3268] != null",
"context": "node is not null",
"expected": "|Object| [Node:3268] != null",
"success": true
}, {
"actual": "[Node:3268] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3268] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3456]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3456]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3456]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3456]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3456] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3456] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3456] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3456] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801597: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3015] is equal to |Object| [Node:3015]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3015] is equal to |Object| [Node:3015]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3061] is instance of class: [GDScript:2971]",
"context": "Then we get that inner class back",
"expected": "[Reference:3061] is instance of class: [GDScript:2971]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:2933], A:[Reference:2934], A/B:[Reference:2936], C:[Reference:2935], C/D:[Reference:2937]} is not equal to |Dictionary| {.:[Reference:2953], A:[Reference:2954], A/B:[Reference:2956], C:[Reference:2955], C/D:[Reference:2957]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:2933], A:[Reference:2934], A/B:[Reference:2936], C:[Reference:2935], C/D:[Reference:2937]} != |Dictionary| {.:[Reference:2953], A:[Reference:2954], A/B:[Reference:2956], C:[Reference:2955], C/D:[Reference:2957]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3268] is equal to |Object| [Node:3268]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3268] is equal to |Object| [Node:3268]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3324] != null",
"context": "node is not null",
"expected": "|Object| [Node:3324] != null",
"success": true
}, {
"actual": "[Node:3324] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3324] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3346] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3346] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3341] has method: title",
"context": "Then it passes",
"expected": "[Node:3341] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3341] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3372] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3372] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3398] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3398] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] is not freed",
"context": "Then it passes",
"expected": "[Node:3401] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341].builtin_dummy is not connected to [Node:3341].title",
"context": "Then it passes",
"expected": "[Node:3341].builtin_dummy is not connected to [Node:3341].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3341] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3341] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341].builtin_dummy is connected to [Node:3341].title",
"context": "Then it passes",
"expected": "[Node:3341].builtin_dummy is connected to [Node:3341].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3341] has meta: dummy",
"success": true
}, {
"actual": "[Node:3341] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3341] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3341] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3341] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3341] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3341] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3416] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3416] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3418] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3418] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3445] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3445] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3445]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3445]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3445]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3445]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3445] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3445] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801627: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3051] is equal to |Object| [Node:3051]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3051] is equal to |Object| [Node:3051]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3095] is instance of class: [GDScript:3010]",
"context": "Then we get that inner class back",
"expected": "[Reference:3095] is instance of class: [GDScript:3010]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3112], A:[Reference:3113], A/B:[Reference:3115], C:[Reference:3114], C/D:[Reference:3116]} is not equal to |Dictionary| {.:[Reference:3129], A:[Reference:3130], A/B:[Reference:3132], C:[Reference:3131], C/D:[Reference:3133]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3112], A:[Reference:3113], A/B:[Reference:3115], C:[Reference:3114], C/D:[Reference:3116]} != |Dictionary| {.:[Reference:3129], A:[Reference:3130], A/B:[Reference:3132], C:[Reference:3131], C/D:[Reference:3133]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:3005] is equal to |Object| [Node:3005]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3005] is equal to |Object| [Node:3005]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3340] != null",
"context": "node is not null",
"expected": "|Object| [Node:3340] != null",
"success": true
}, {
"actual": "[Node:3340] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3340] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3385] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3385] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3384] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3384] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3384] has meta: dummy",
"success": true
}, {
"actual": "[Node:3384] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3384] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] has method: title",
"context": "Then it passes",
"expected": "[Node:3384] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3384] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3384] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3384] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3440] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3440] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3442] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3442] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384].builtin_dummy is not connected to [Node:3384].title",
"context": "Then it passes",
"expected": "[Node:3384].builtin_dummy is not connected to [Node:3384].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3445] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3445] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3384] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3384].builtin_dummy is connected to [Node:3384].title",
"context": "Then it passes",
"expected": "[Node:3384].builtin_dummy is connected to [Node:3384].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3449] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3449] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3451] is not freed",
"context": "Then it passes",
"expected": "[Node:3451] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3493]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3493]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3493] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3493] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3493] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3493] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3493]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3493]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801644: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:5655] != null",
"context": "node is not null",
"expected": "|Object| [Node:5655] != null",
"success": true
}, {
"actual": "[Node:5655] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:5655] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5677] != null",
"context": "Then it passes",
"expected": "|Object| [Node:5677] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:5672] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:5672] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5672] has meta: dummy",
"success": true
}, {
"actual": "[Node:5672] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5672] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] has method: title",
"context": "Then it passes",
"expected": "[Node:5672] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:5672] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:5672] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:5672] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5690] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:5690] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5692] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:5692] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672].builtin_dummy is not connected to [Node:5672].title",
"context": "Then it passes",
"expected": "[Node:5672].builtin_dummy is not connected to [Node:5672].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5695] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:5695] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:5672] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5672].builtin_dummy is connected to [Node:5672].title",
"context": "Then it passes",
"expected": "[Node:5672].builtin_dummy is connected to [Node:5672].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5699] is blocking signals",
"context": "Then it passes",
"expected": "[Node:5699] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5701] is not freed",
"context": "Then it passes",
"expected": "[Node:5701] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:5779]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:5779]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:5779] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:5779] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:5779] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:5779] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:5779]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:5779]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801654: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7612] is equal to |Object| [Node:7612]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:7612] is equal to |Object| [Node:7612]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:7656] is instance of class: [GDScript:3010]",
"context": "Then we get that inner class back",
"expected": "[Reference:7656] is instance of class: [GDScript:3010]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:7671], A:[Reference:7672], A/B:[Reference:7674], C:[Reference:7673], C/D:[Reference:7675]} is not equal to |Dictionary| {.:[Reference:7688], A:[Reference:7689], A/B:[Reference:7691], C:[Reference:7690], C/D:[Reference:7692]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:7671], A:[Reference:7672], A/B:[Reference:7674], C:[Reference:7673], C/D:[Reference:7675]} != |Dictionary| {.:[Reference:7688], A:[Reference:7689], A/B:[Reference:7691], C:[Reference:7690], C/D:[Reference:7692]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:7568] is equal to |Object| [Node:7568]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:7568] is equal to |Object| [Node:7568]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:7899] != null",
"context": "node is not null",
"expected": "|Object| [Node:7899] != null",
"success": true
}, {
"actual": "[Node:7899] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:7899] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7925] != null",
"context": "Then it passes",
"expected": "|Object| [Node:7925] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:7932] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:7932] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7932] has meta: dummy",
"success": true
}, {
"actual": "[Node:7932] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7932] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] has method: title",
"context": "Then it passes",
"expected": "[Node:7932] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:7932] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:7932] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:7932] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7961] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:7961] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7963] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:7963] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932].builtin_dummy is not connected to [Node:7932].title",
"context": "Then it passes",
"expected": "[Node:7932].builtin_dummy is not connected to [Node:7932].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7966] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:7966] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:7932] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7932].builtin_dummy is connected to [Node:7932].title",
"context": "Then it passes",
"expected": "[Node:7932].builtin_dummy is connected to [Node:7932].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7970] is blocking signals",
"context": "Then it passes",
"expected": "[Node:7970] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7972] is not freed",
"context": "Then it passes",
"expected": "[Node:7972] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:8048]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:8048]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:8048] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:8048] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:8048] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:8048] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:8048]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:8048]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801708: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1372] is instance of class: [GDScript:1365]",
"context": "Then we get that inner class back",
"expected": "[Reference:1372] is instance of class: [GDScript:1365]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1421] is equal to |Object| [Node:1421]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1421] is equal to |Object| [Node:1421]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1438], A:[Reference:1439], A/B:[Reference:1441], C:[Reference:1440], C/D:[Reference:1442]} is not equal to |Dictionary| {.:[Reference:1454], A:[Reference:1455], A/B:[Reference:1457], C:[Reference:1456], C/D:[Reference:1458]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1438], A:[Reference:1439], A/B:[Reference:1441], C:[Reference:1440], C/D:[Reference:1442]} != |Dictionary| {.:[Reference:1454], A:[Reference:1455], A/B:[Reference:1457], C:[Reference:1456], C/D:[Reference:1458]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1502] is equal to |Object| [Node:1502]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1502] is equal to |Object| [Node:1502]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1716] != null",
"context": "node is not null",
"expected": "|Object| [Node:1716] != null",
"success": true
}, {
"actual": "[Node:1716] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1716] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1729] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1729] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1761] is not freed",
"context": "Then it passes",
"expected": "[Node:1761] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1735] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1735] has meta: dummy",
"success": true
}, {
"actual": "[Node:1735] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1735] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] has method: title",
"context": "Then it passes",
"expected": "[Node:1735] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1735] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1735] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1735] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735].builtin_dummy is not connected to [Node:1735].title",
"context": "Then it passes",
"expected": "[Node:1735].builtin_dummy is not connected to [Node:1735].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1810] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1810] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1812] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1812] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735].builtin_dummy is connected to [Node:1735].title",
"context": "Then it passes",
"expected": "[Node:1735].builtin_dummy is connected to [Node:1735].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1735] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1816] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1816] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1818] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1818] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1860]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1860]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1860]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1860]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1860] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1860] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1860] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1860] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801724: [  ],
1609801746: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1382] is instance of class: [GDScript:1375]",
"context": "Then we get that inner class back",
"expected": "[Reference:1382] is instance of class: [GDScript:1375]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1434] is equal to |Object| [Node:1434]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1434] is equal to |Object| [Node:1434]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1490], A:[Reference:1491], A/B:[Reference:1493], C:[Reference:1492], C/D:[Reference:1494]} is not equal to |Dictionary| {.:[Reference:1507], A:[Reference:1508], A/B:[Reference:1510], C:[Reference:1509], C/D:[Reference:1511]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1490], A:[Reference:1491], A/B:[Reference:1493], C:[Reference:1492], C/D:[Reference:1494]} != |Dictionary| {.:[Reference:1507], A:[Reference:1508], A/B:[Reference:1510], C:[Reference:1509], C/D:[Reference:1511]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1476] is equal to |Object| [Node:1476]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1476] is equal to |Object| [Node:1476]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1717] != null",
"context": "node is not null",
"expected": "|Object| [Node:1717] != null",
"success": true
}, {
"actual": "[Node:1717] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1717] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1751] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1751] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1783] is not freed",
"context": "Then it passes",
"expected": "[Node:1783] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1756] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1756] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1756] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756].builtin_dummy is connected to [Node:1756].title",
"context": "Then it passes",
"expected": "[Node:1756].builtin_dummy is connected to [Node:1756].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1756] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1756] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1828] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1828] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] has method: title",
"context": "Then it passes",
"expected": "[Node:1756] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756].builtin_dummy is not connected to [Node:1756].title",
"context": "Then it passes",
"expected": "[Node:1756].builtin_dummy is not connected to [Node:1756].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1834] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1834] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1756] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1756] has meta: dummy",
"success": true
}, {
"actual": "[Node:1756] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1756] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1838] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1838] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1840] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1840] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1889] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1889] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1889] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1889] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1889]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1889]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1889]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1889]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1609801759: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1361] is instance of class: [GDScript:1354]",
"context": "Then we get that inner class back",
"expected": "[Reference:1361] is instance of class: [GDScript:1354]",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1406] is equal to |Object| [Node:1406]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1406] is equal to |Object| [Node:1406]",
"success": true
} ],
"context": "When we call the double the second time",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1395], A:[Reference:1398], A/B:[Reference:1400], C:[Reference:1399], C/D:[Reference:1401]} is not equal to |Dictionary| {.:[Reference:1416], A:[Reference:1417], A/B:[Reference:1419], C:[Reference:1418], C/D:[Reference:1420]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1395], A:[Reference:1398], A/B:[Reference:1400], C:[Reference:1399], C/D:[Reference:1401]} != |Dictionary| {.:[Reference:1416], A:[Reference:1417], A/B:[Reference:1419], C:[Reference:1418], C/D:[Reference:1420]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1539] is equal to |Object| [Node:1539]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1539] is equal to |Object| [Node:1539]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1712] != null",
"context": "node is not null",
"expected": "|Object| [Node:1712] != null",
"success": true
}, {
"actual": "[Node:1712] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1712] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1761] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1761] != null",
"success": true
} ],
"context": "When calling Node is not null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1756] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1756] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1751] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751].builtin_dummy is connected to [Node:1751].title",
"context": "Then it passes",
"expected": "[Node:1751].builtin_dummy is connected to [Node:1751].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751].builtin_dummy is not connected to [Node:1751].title",
"context": "Then it passes",
"expected": "[Node:1751].builtin_dummy is not connected to [Node:1751].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1751] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1751] has meta: dummy",
"success": true
}, {
"actual": "[Node:1751] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1751] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1770] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1770] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1751] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] has method: title",
"context": "Then it passes",
"expected": "[Node:1751] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1751] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1775] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1775] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1777] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1777] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] is not freed",
"context": "Then it passes",
"expected": "[Node:1779] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1751] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/on_floor.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 23 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 24 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1860]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1860]",
"success": true
} ],
"context": "When we watch and emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1860] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1860] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1860]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1860]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1860] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1860] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/ayield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/ayield2.test.gd",
"tags": [  ],
"test": ExtResource( 23 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/Gyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/Gyield2.test.gd",
"tags": [  ],
"test": ExtResource( 24 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/someyield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/someyield2.test.gd",
"tags": [  ],
"test": ExtResource( 22 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield2.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield2.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield3.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield3.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ]
}
current_key = 1609801759
